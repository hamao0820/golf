@startuml GOLF

package "mian" {
    class Main{
        +main(): void
    }
}

package "logic" {
    class Logic {
        -stock: Stock
        -layout: Layout
        -lead: Lead
        -deck: Deck
        +start(): void
        +excute(): void
        +isEnd(): bool
        +isWin(): bool
        +isLose(): bool
        +getLayoutSize(): int
        +getLayout(): Column[]
        +getStock(): Card[]
        +getStockSize(): int
        +getLead(): Card[]
        +drawCardFromStock(): void
        +canTake(col: int): bool
        +takeCardFromLayout(col: int): void
    }

    class Judger {
        {static} canTake(lead: Lead, target: Card): bool
    }
}

package "tools" {
    ' カード
    class Card {
        -rank: Rank
        -isFaceUp: bool
        -suit: Suit
        +card(rank: Rank, suit: Suit): void
        +rank(): Rank
        +suit(): Suit
        +isFaceUp: bool
        +faceUp(): void
    }
    ' 山札
    class Stock {
        -cards: Card[]
        +stock(): void
        +drawCard(): Card
        +size(): int
        +getStock: Card[]
    }
    ' 列
    class Column {
        {static} CardsNum: int
        -cards: Card[]
        +column(cards: Card[]): void
        +takeCard(): Card
        +size(): int
        +canTake(): bool
        +getLastCard(): Card
    }
    ' 場札
    class Layout {
        {static} ColumnNum
        -columns: Column[]
        +size(): int
        +canTake(): bool
        +takeCard(): Card
        +getLayout(): Column[]
        +getLastCard(): Card
        +isRemain: bool
    }
    ' 台札
    class Lead {
        -cards: Card[]
        +lead(lead: Card): void
        +addLeads(): void
        +getLead(): Card
    }
    ' デッキ
    class Deck {
        -cards: Card[]
        +deck(): void
        +handOutCard(): Card
    }
}

package "ui" {
    class Model {
        -logic: Logic
        getLayoutSize(): int
        +getLayout(): Column[]
        +getStock(): Card[]
        +getStockSize():int
        +getLead():Card
        +drawCardFromStock(): void
        +takeCardFromLayout(col: int): void
        +canTake(col: number): bool
        +isEnd(): bool
        +isWin(): bool
        +isLose(): bool
        +retry(): void
    }
    class View {
        -model: Model
        -controller: Controller
        -messageDialog: HTMLDialogElemnt
        -gameBlock: HTMLDivElement
        -layoutBlock: HTMLDivElement
        -stockBlock: HTMLDivElement
        -leadBlock: HTMLDivElement
        +view(): void
        -createCardFrame(): HTMLDivElement
        -createFaceUpCard(card: Card): HTMLDivElement
        -displayLayout(): void
        -displayStock(): void
        -displayLead(): void
        -displayDialog(message: string)
        -openDialog(): void
        -closeDialog(): void
        -display(): void
        +clear(): void
        +update(): void
    }
    class Controller {
        -view: View
        -model: Model
        +handleClickStock(): void
        +handleClickLayout(column: int): void
        +handleClickRetryButton(): void
    }
}

Main o- Logic
Deck o-- Card
Stock o-- Card
Lead o-- Card
Column o-- Card
Layout o-- Column
Logic o- Deck
Logic o- Stock
Logic o- Lead
Logic o- Layout
Controller o- Model
Controller o- View
View o-- Model
View o- Controller
Model o- Logic

@enduml
